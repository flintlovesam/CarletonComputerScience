{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww25100\viewh13480\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
Read through all notes\
\
\
\
Chapter 1:\
\
\
Chapter 2:\
- symbolic and procedural abstraction\
- scheme general rule of evaluation: eval/apply loop\
- special form : what makes it\
- normal vs applicative order\
\
\
\
Chapter 3:\
- lexical scopes; functions in functions\'85one public function that contains other private functions, think sqrt\
- free variable, visibility, scoping\
- creating local variables: use define at the top \'85also can use create helper function.\
- What does lambda do? How does act as syntactic sugar for let?\
\
\
3.3: repetition:\
- creating recursive programs to do many things\
\
Linear recursion: build up the stack, deferred operations\
Tail recursion: entire call stack need not build up , all gets performed at the end.\
\
FIRST clsss and higher order procedures\
1st class- pass functions as data.\
Higher order: a function that takes in another function as data is a higher order procedure \
\
\
LAMBDA: a fundamental part of the language: creating functions without giving them explicit names\
- read lots\
\
\
Closures\
- idea is that it is the memory model of a procedure object\
- when a function is returned from another function\
\
- X is bound to 2, Y is whatever it is that we pass in  ( \'93multiplyby\'94 function)\'85double is bound to the lambda, where x is 2\'85.triple where x is 3\
\
\
Chapter 4:\
\
- making rational numbers with cons\'85lisp. List processing \
- mapping, filtering, flattening, reducing to single #,\
- arbitrarily nested list is a tree ( lists nested in lists\'85. )\
\
\
Binary tree: maintain a specific organization to the list structure.\
\
\
\'97 binding  to environments\
\
\
\
Chapter 5: Streams\
- basic idea; first item consed with more stuff to do later, formalized in a lambda, which can be used to \
\
- The other way of doing the stream is placing a delay in replacement of the lambda\
- \
\
macros\'85a syntax rule that when it sees stream cons a b, it replaces it with (cons a (delay b))\'85 to avoid the issue of things being evaluated prematurely\
\
\
Chapter 6: contour models\
- set! Got in the way of using substitution model, so instead we use the contour model\
- basic thing is to show scope\
- using closure to create persistence :   refer to this\
\
- \
\
\
Chapter 7: Meta circular interpreter \
(NO MCI CODE , but there are MCI concept questions\'85how it works, what it is doing, why it is doing things)\
\
\
- an interpreter written in scheme to interpret custom things we want to interact with in scheme.\
- core of MCi is eval / apply loop\
- driver loop is just a repl\
\
\
\
Chapter 8 - 9 -10\
\
Idea of a declarative language.\
- declare the world, the interests in that world.\
 Clauses as facts and rules.\
\
= operator is a unifier\
\
Unification rules, and unification algorithm.\
\
Arithmetic: we use is.\
\
- can we reach end point in a tree, no more goals . Resolution algorithm\
\
\
\
9.1 Recursion and backtracking.\
- recursion/iteration ( use of same examples from scheme/lisp)\
\
| operator as cons\
\
Accumulator is another word for reduce.\
\
\
\
Prolog CUTS\
- what a cut is, how it prunes tree, unifying to head of a rule. \
\
-Why we use them\
\
- the two types.\
\
\
\
THE TEST\
\
8 pages\
4 questions\
\
\
20 multiple choice: BOLDED things, \
\
Definitions: what it is, where the idea is found in a piece of code, or write a piece of code\
\
\
Comprehension: here is code, what does it yield\
\
\
Programming\
- problems of various large and small for both languages\
- one large program for each\
\
\
Contour diagram:\
- at least 1 question\
\
-70/30 scheme to prolog \
}