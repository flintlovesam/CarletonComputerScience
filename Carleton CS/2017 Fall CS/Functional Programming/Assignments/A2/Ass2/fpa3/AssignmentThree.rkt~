; Question 1 
#|
(define (f n)
(if (< n 4) (f(n) = n) (f(n) = f(n-1) + 2f(n-2) + 3f(n-3) + 4f(n-4))

  ))
 |#

(define (f n)
  (if (< n 4)
      n
      ( + (f (- n 1)) (* 2 (f(- n 2))) (* 3 (f(- n 3))) (* 4 (f(- n 4))))
      ))

(f 6)
( + (f 5) (* 2 (f(- 6 2))) (* 3 (f(- 6 3))) (* 4 (f(- 6 4))))
( + (f (- 5 1)) (* 2 (f(- 5 2))) (* 3 (f(- 5 3))) (* 4 (f(- 5 4))))
( + (f 4) (* 2 (f 3)) (* 3 (f 2)) (* 4 (f 1)))
( + ( + (f (- 4 1)) (* 2 (f(- 4 2))) (* 3 (f(- 4 3))) (* 4 (f(- 4 4)))) (* 2 (f 3)) (* 3 (f 2)) (* 4 (f 1)))
( + ( + (f 3) (* 2 (f 2)) (* 3 (f 1)) (* 4 (f 0))) (* 2 (f 3)) (* 3 (f 2)) (* 4 (f 1)))
( + ( + 3 4 3 0) (* 2 (f 3)) (* 3 (f 2)) (* 4 (f 1)))
( + ( + 3 4 3 0) 6 6 4)




;(f 5)
( + (f (- 5 1)) (* 2 (f(- 5 2))) (* 3 (f(- 5 3))) (* 4 (f(- 5 4))))
( + (f 4) (* 2 (f 3)) (* 3 (f 2)) (* 4 (f 1)))
( + ( + (f (- 4 1)) (* 2 (f(- 4 2))) (* 3 (f(- 4 3))) (* 4 (f(- 4 4)))) (* 2 (f 3)) (* 3 (f 2)) (* 4 (f 1)))
( + ( + (f 3) (* 2 (f 2)) (* 3 (f 1)) (* 4 (f 0))) (* 2 (f 3)) (* 3 (f 2)) (* 4 (f 1)))
( + ( + 3 4 3 0) (* 2 (f 3)) (* 3 (f 2)) (* 4 (f 1)))
( + ( + 3 4 3 0) 6 6 4)


;(f 4)
( + (f (- 4 1)) (* 2 (f(- 4 2))) (* 3 (f(- 4 3))) (* 4 (f(- 4 4))))
( + (f 3) (* 2 (f 2)) (* 3 (f 1)) (* 4 (f 0)))
( + 3 4 3 0)

;;;;;;;;;; b
#|
( define (fb n)
   (define (fb-iteration product )

     (if n < 4)
     ( + (f (- n 1)) (* 2 (f(- n 2))) (* 3 (f(- n 3))) (* 4 (f(- n 4))))
     (fb-iteration product )

     )
   )
|#


; QUESTION two

(define (pTri row col)
  (cond((= row col) 1)
       ((= col 0) 1)
       (else(+(pTri(- row 1)(- col 1))
              (pTri(- row 1) col) ) )))
; (pTri 4 2)
; else invoked  (+ (pTri(- 4 1)(- 2 1)) (pTri(- 4 1) 2))
              ; (+ (pTri(3)(1)) (pTri 3 2))
              ; (+ (+ (pTri(- 3 1)(- 1 1)) (pTri(- 3 1) 1)) (+ (pTri(- 3 1)(- 3 1)) (pTri(- 3 1) 2)))
              ;(+ (+ (pTri(2)(0)) (pTri(2) 1)) (+ (pTri(2)(2)) (pTri(2) 2)))
             ; (+ (+ 1 (pTri(2) 1)) (+ 1 1))
              (+  (+ 1 (+ (pTri(- 2 1)(- 1 1)) (pTri(- 2 1) 1)))  (+ 1 1))
             ;(+  (+ 1 (+ (pTri(1)(0)) (pTri(1) 1)))  (+ 1 1))
             (+  (+ 1 (+ 1 1))  (+ 1 1))
              ( + 3 2




; QUESTION THREE

( Define (numCount n)  
  (if (= n 0)
      0
      ( + 1 (numCount (floor(/ n 10)))))
  )







;(define (digits-iter n))
;   (if (= n 0 ) 1 (if (= n 0) 0 ( + 1 (numCount (floor(/ n 10))))))
